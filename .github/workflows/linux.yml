name: Linux build and test

on: [push, pull_request]

jobs:
  test-clang-based:
    name: clang ${{ matrix.clang_version }}, ${{ matrix.os }}, CUDA ${{matrix.cuda}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        clang_version: [13]
        rocm_version: ['5.1.0']
        os: [ubuntu-20.04]
        cuda: [11.0]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: install CUDA 11.0
      if: matrix.cuda == 11.0
      run: |
        mkdir -p /opt/hipSYCL/cuda
        wget -q -O cuda.sh http://developer.download.nvidia.com/compute/cuda/11.0.2/local_installers/cuda_11.0.2_450.51.05_linux.run
        sudo sh ./cuda.sh --override --silent --toolkit --no-man-page --no-drm --no-opengl-libs --installpath=/opt/hipSYCL/cuda || true
        echo "CUDA Version 11.0.0" | sudo tee /opt/hipSYCL/cuda/version.txt
    - name: install ROCm
      run: |
        sudo apt install libnuma-dev cmake unzip
        wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
        echo 'deb [arch=amd64] https://repo.radeon.com/rocm/apt/${{matrix.rocm_version}} bionic main' | sudo tee /etc/apt/sources.list.d/rocm.list
        sudo apt update
        sudo apt install rocm-dev
    - name: install LLVM
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{matrix.clang_version}}
        sudo apt install libclang-${{matrix.clang_version}}-dev clang-tools-${{matrix.clang_version}} libomp-${{matrix.clang_version}}-dev
    - name: install boost (from source)
      if: matrix.os == 'ubuntu-18.04'
      run: |
        wget -q https://boostorg.jfrog.io/artifactory/main/release/1.70.0/source/boost_1_70_0.zip
        unzip boost_1_70_0.zip
        cd boost_1_70_0
        ./bootstrap.sh --prefix=/usr
        sudo ./b2 link=static,shared install -j$(nproc) || true
        cd ..
    - name: install boost (from apt)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt install libboost-all-dev
    - name: build hipSYCL
      run: |
        git clone https://github.com/illuhad/hipSYCL.git
        cd hipSYCL
        mkdir build && cd build
        cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{matrix.clang_version}} -DCLANG_EXECUTABLE_PATH=/usr/bin/clang++-${{matrix.clang_version}} -DLLVM_DIR=/usr/lib/llvm-${{matrix.clang_version}}/cmake -DWITH_CUDA_BACKEND=ON -DWITH_ROCM_BACKEND=ON -DWITH_LEVEL_ZERO_BACKEND=ON -DCMAKE_INSTALL_PREFIX=`pwd`/install -DCUDA_TOOLKIT_ROOT_DIR=/opt/hipSYCL/cuda -DROCM_PATH=/opt/rocm ..
        make -j2 install
        cp /opt/hipSYCL/cuda/lib64/stubs/libcuda.so `pwd`/install/lib/libcuda.so
        cp /opt/hipSYCL/cuda/lib64/stubs/libcuda.so `pwd`/install/lib/libcuda.so.1
    - name: build CPU tests
      run: |
        mkdir /home/runner/work/hipSYCL/hipSYCL/build/tests-cpu
        cd /home/runner/work/hipSYCL/hipSYCL/build/tests-cpu
        cmake -DHIPSYCL_TARGETS="omp" -DhipSYCL_DIR=/home/runner/work/hipSYCL/hipSYCL/build/install/lib/cmake/hipSYCL /home/runner/work/hipSYCL/hipSYCL/tests
        make -j2
    - name: build CUDA tests
      run: |
        mkdir /home/runner/work/hipSYCL/hipSYCL/build/tests-cuda
        cd /home/runner/work/hipSYCL/hipSYCL/build/tests-cuda
        cmake -DHIPSYCL_TARGETS="cuda:sm_60" -DhipSYCL_DIR=/home/runner/work/hipSYCL/hipSYCL/build/install/lib/cmake/hipSYCL /home/runner/work/hipSYCL/hipSYCL/tests
        make -j2
    - name: build ROCm tests
      run: |
        mkdir /home/runner/work/hipSYCL/hipSYCL/build/tests-rocm
        cd /home/runner/work/hipSYCL/hipSYCL/build/tests-rocm
        cmake -DHIPSYCL_PLATFORM=rocm -DHIPSYCL_GPU_ARCH=gfx906 -DhipSYCL_DIR=/home/runner/work/hipSYCL/hipSYCL/build/install/lib/cmake/hipSYCL /home/runner/work/hipSYCL/hipSYCL/tests
        make -j2
    - name: run CPU tests
      run: |
        cd /home/runner/work/hipSYCL/hipSYCL/build/tests-cpu
        LD_LIBRARY_PATH=/home/runner/work/hipSYCL/hipSYCL/build/install/lib ./sycl_tests
